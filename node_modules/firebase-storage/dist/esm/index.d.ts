export interface StorageObject {
    kind: string;
    id: string;
    selfLink: string;
    mediaLink: string;
    name: string;
    bucket: string;
    generation: string;
    metageneration: string;
    contentType: string;
    storageClass: string;
    size: string;
    md5Hash: string;
    cacheControl: string;
    crc32c: string;
    etag: string;
    timeCreated: string;
    updated: string;
    timeStorageClassUpdated: string;
}
export declare const createToken: ({ clientEmail, privateKey, }: {
    clientEmail: string;
    privateKey: string;
}) => Promise<string>;
export declare const info: ({ token, bucket, name, }: {
    token: string;
    bucket: string;
    name: string;
}) => Promise<StorageObject>;
export declare const download: ({ token, bucket, name, }: {
    token: string;
    bucket: string;
    name: string;
}) => Promise<ArrayBuffer>;
export declare const upload: ({ token, bucket, name, file, published, metadata, }: {
    token: string;
    bucket: string;
    name: string;
    file: Blob;
    published?: boolean | undefined;
    metadata?: {
        [key: string]: unknown;
    } | undefined;
}) => Promise<any>;
export declare const del: ({ token, bucket, name, }: {
    token: string;
    bucket: string;
    name: string;
}) => Promise<boolean>;
export declare const list: ({ token, bucket, }: {
    token: string;
    bucket: string;
}) => Promise<StorageObject[]>;
type ParamType<T extends (...args: never[]) => unknown, P = Parameters<T>[0]> = Omit<P, "token" | "bucket"> & {
    bucket?: string;
};
export declare const getStorage: ({ clientEmail, privateKey, bucket: _bucket, }: {
    clientEmail: string;
    privateKey: string;
    bucket?: string | undefined;
}) => {
    info: (params: ParamType<typeof info>) => Promise<StorageObject>;
    download: (params: ParamType<typeof download>) => Promise<ArrayBuffer>;
    upload: (params: ParamType<typeof upload>) => Promise<any>;
    del: (params: ParamType<typeof del>) => Promise<boolean>;
    list: (params: ParamType<typeof list>) => Promise<StorageObject[]>;
};
export {};
